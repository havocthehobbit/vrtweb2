import { useState,useEffect,useRef,useContext ,Context , useMemo, useCallback} from "react"
import $gl from "../../../../common/globallib";
//import { $cgl } from "../../../globals/cg"
//import { Window0001 } from "../../../widgets/containers/window0001"
import { $cn } from "../../../../common/libNative"
import { v4 as uuidv4 } from 'uuid';
import { ContextRoutes } from "../../../context/contextRoutes" ;

import { useWindowSize } from "../../../../common/widgets/containers/useWindowSize";

import { useMyLayout } from "../../../../common/widgets/containers/useMyLayout";


//let feach=$cn.each
let tof=$cn.tof
//let isUn=$cn.isUn
let isOb=$cn.isOb
//let cl=$cn.l

/* - daily checks rewrite checklist
    [] export log and service once a week , 
        * tools 
            * diff compare , newly added removed 
    [] seperate cust recs fetch writes
    [] exclusion lists , inclusion lists 
        * some customers may want certain eod data ignored 
    [] * teams alert , 
    [] * setup section for mail alerts , in active but setup
        * allow groups alerts , for checkers emails 
        * have a major central alert 
    [] central single unique error , 
        * cross analysis problematic errors accross customers , and solution section, discussion section
        * so we can see witch packs EOD issues are on, and advise when unknown new issues start occuring 
        * advise on investigation steps around specific type of issue , to help analysts resolve quicker 
        * have general advise section , 
        * allows us to attatch customer code counter on, to show if this has re-occured
            * month year and month could be helpful indexes , so we can measure decrease or increase over time for relevance in Problem resolution at scale . 
    [] timeing ,
        * fetch already run for the day , mark as fetch succesfully, so that it doesnt need to fetch atgain, and add a refetch button
        * count failures , set margin , to alert of issues 
    [] * margin of failure stats , 
        * also add time range ability to ignore errors or failers for amd to start watching again , 
            * good for pre go lives or when you know someone is scheduled to fix something and checks do not need to be done 

*/

export const K8DailyChecksMain=(props)=>{ 
    let allState={
        "viewCards" : {
            "name" : "viewCards" ,
        },
        "editSettings" : {
            "name" : "editSettings" ,
        },
        "viewSummary" : {
            "name" : "viewSummary" ,
        }
    }    
    
    let setCurrStateRef=useRef(()=>{});

    let {wWidth,wHeight}=useWindowSize()
    
    
    
    // ========================================================================

        let style={
            position : "relative",
            top : 80,
            margin : 20
        }
        if (props.style){
            style={...style,...props.style}
        }

        let menuStyle={
            background : "white",
            position : "relative",
            display : "inline-block",
            width : 100,
            height : 300,
            borderRadius : 8,
            margin : 5,
            padding : 5,       
            overflow : "hidden", 
        };

        let checkersStyle={
            background : "white",
            position : "relative",
            display : "inline-block",
            width : 100,
            height : 300,
            borderRadius : 8,
            margin : 5,
            padding : 5,
            overflow : "hidden",
        };

        
    // ========================================================================
        

        let posContsStates={}; 
        let posContsO={};
        let name="";
        
        if (true){
            if (wWidth < 600){
                menuStyle={...menuStyle, ...{ width : 500 , height : 40 }};
            }


            name="menu";
            posContsO[name]={
                name : name,            
                e : (
                        <div
                            key={name}
                            style={menuStyle}
                        >
                            <h4>menu</h4>  
                            
                            <div
                                menuname={"viewCards"}
                                style={{
                                    position : "relative",
                                    display : "inline-block",
                                    cursor : "pointer",
                                }}
                                onClick={(e)=>{
                                    let menuname=e.target.getAttribute("menuname");
                                    setCurrStateRef.current(menuname)
                                }}
                            >
                                <label
                                    menuname={"viewCards"}
                                >Cards</label>
                            </div>           
                            <div
                                menuname={"viewSummary"}
                                style={{
                                    position : "relative",
                                    display : "inline-block",
                                    cursor : "pointer",
                                }}
                                onClick={(e)=>{
                                    let menuname=e.target.getAttribute("menuname");
                                    setCurrStateRef.current(menuname)
                                }}
                            >
                                <label
                                    menuname={"viewSummary"}
                                >Summary</label>                            
                            </div>           
                            <div
                                menuname={"editSettings"}
                                style={{
                                    position : "relative",
                                    display : "inline-block",
                                    cursor : "pointer",
                                }}
                                onClick={(e)=>{
                                    let menuname=e.target.getAttribute("menuname");
                                    setCurrStateRef.current(menuname)
                                }}
                            >
                                <label
                                    menuname={"editSettings"}
                                >Settings</label>                            
                            </div>           

                        </div>
                ),
            };


            name="title";
            posContsO[name]={        
                name : name,            
                e : (                    
                        <div
                            key={name}
                            style={{
                                //background : "white",
                                background : "white",
                                position : "relative",
                                display : "inline-block",
                                width : 300,                 
                                height : 25,
                                borderRadius : 8,
                                overflow : "hidden",
                            }}
                        >
                            <h3
                                style={{
                                    margin : 0, padding : 0,
                                    display : "inline-block",
                                }}
                            >KCS Daily Checks</h3>                     

                            {
                               // wWidth + " x " + wHeight
                            }

                        </div>
                        
                ),
            };
            name="linebreak1";
            posContsO[name]={
                name : name,            
                e : (<br key={name} />),
            };        

            

            
            name="summary";
            posContsO[name]={
                name : name,            
                e : (             
                        <div
                            key={name}
                            style={{
                                background : "white",
                                position : "relative",
                                display : "inline-block",
                                width : 800,
                                height : 300,
                                borderRadius : 8,
                                margin : 5,
                                padding : 5,
                                overflow : "hidden",
                            }}
                        >
                            <h4>Summary</h4>                
                        </div>
                )
            };

            name="checkers";
            posContsO[name]={
                name : name,            
                e : (                  
                        <div
                            key={name}
                            style={checkersStyle}
                        >
                            <h4>checkers</h4>                
                        </div>
                )

            };

            name="cards";
            posContsO[name]={
                name : name,            
                e : (                  
                        <div
                            key={name}
                            style={{
                                background : "white",
                                position : "relative",
                                display : "inline-block",
                                width : 400,
                                height : 300,
                                borderRadius : 8,
                                margin : 5,
                                padding : 5,
                                overflow : "hidden"
                            }}
                        >
                            <h4>cards</h4>                
                        </div>
                )

            };

        
            // ========================================================================
            
            name="viewSummary";
            posContsStates[name]={
                name : name,
                posCont : [ "title" , "linebreak1" , "menu" , "summary" , "checkers" ],            
                eLogic : function(){
                    let tt=this;
                    let args=arguments;
                    if (args.length > 0){
                        tt=args[0]
                    }
                    let ret=tt.posCont
                    if (wWidth < 700){
                        ret=[ "menu" , "summary"  ]
                    }
                    return ret
                }
            }

            name="viewCards";
            posContsStates[name]={
                name : name,
                posCont : [ "title" , "linebreak1" , "menu" , "cards" , "checkers" ],            
                eLogic : function(){
                    let tt=this;
                    let args=arguments;
                    if (args.length > 0){
                        tt=args[0]
                    }
                    let ret=tt.posCont
                    if (wWidth < 700){
                        ret=[ "menu" , "summary"  ]
                    }
                    return ret
                }
            }

            name="editSettings";
            posContsStates[name]={
                name : name,
                posCont : [ "title","menu"  ],            
                eLogic : function(){
                    let tt=this;
                    let args=arguments;
                    if (args.length > 0){
                        tt=args[0]
                    }
                    let ret=tt.posCont
                    if (wWidth < 700){
                        //ret=[ "menu" , "summary"  ]
                    }
                    return ret
                }
            }
        }

    // ========================================================================

        let { myLayout,currState ,setCurrState  }=useMyLayout({ posContsStates, posContsO , allState , currStateDef : "viewSummary" })
        setCurrStateRef.current=setCurrState;

    // ========================================================================

    return ( 
        <div
            style={style}
        >
            {myLayout }
        </div>
    )
    
}
