var child_process=require('child_process')
var fs=require('fs');
var execSync=child_process.execSync; // synchronouse shell run : var result=execSync(cmdStr)
var existsSync=fs.existsSync;
var lstatSync=fs.lstatSync;
var readdirSync=fs.readdirSync;
var os=require('os');
let $cn=require("./libNative.js").$cn
const readline = require('readline').createInterface({
    input: process.stdin,
    output: process.stdout
});

let cl=$cn.l
let tof=$cn.tof

/*
    !!!!!!!!! 
        Only vanilla and native node libs allowed ,  
        ...no third party library dependancies allowed to be loaded in this file
    !!!!!!!!!
*/

let cool_native_nodejs={
    name : "cool_native_nodejs",
    os : ()=>{
        let myOS={}

        myOS.hostname=os.hostname()
        myOS.platform=os.platform()
        myOS.version=os.version()
        myOS.release=os.release()
        myOS.v={
            hostname : myOS.hostname,
            platform : myOS.platform,
            version : myOS.version,
            release : myOS.release,
        }
        myOS.networks=os.networkInterfaces()
        myOS.ip=(()=>{
            let ipees=""
            $cn.each( os.networkInterfaces(),(re,ie)=>{
                        re.forEach((r,i)=>{
                            if (r.family==="IPv4"){
                                let lastchars=r.address.substr( -2)                            
                                if (lastchars!==".1"){
                                    ipees=r.address
                                }                            
                            }
                        })
            })
            return ipees
        })()

        return myOS
    },
    shellprompt : (...args)=>{ // ("query string ?, cb)
        readline.question(args[0] ,(a,o)=>{
            readline.close()
            let cb=()=>{}
            if (tof(args[1])==="function"){ cb=args[1]}
            
            cb(a,o)
        })
    }, 

    init : function(){
        var args=arguments;
        var args_l=args.length;
        var param={ name : "" }

        this.l_this=this ;       
      
    }
}
let $cnn=cool_native_nodejs;

module.exports.$cnn=cool_native_nodejs;
module.exports.libNativeNode=cool_native_nodejs;
module.exports.coolNativeNodejs=cool_native_nodejs;
