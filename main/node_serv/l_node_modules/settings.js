let path = require("path");
let fs = require("fs");
var existsSync=fs.existsSync;

let child_process = require('child_process');
let os = require('os');

let progargs=require("./execRunParams.js").args
let $cn=require("./libNative.js").$cn
let $cnn=require("./libNativeNode").libNativeNode


let cl=$cn.l



class settingsMod {
    constructor(props){      
        this.settingsFileFN(props)
    }

    settingsFileFN=(...args)=>{
        let tt=this
        let dataO={}
        let dataO_tmp={}
        let cb=()=>{}        

        dataO.port=3001 
    
        if (args.cb!==undefined){
            if (typeof(cb)==="function"){
                cb=args.cb
            }        
        }

        let dataOdef={
            "name" : "test",
            "desc" : "test",
            "env": "test",
            "host" : "127.0.0.1",
            "port" : "3001",

            "pathFrontEndPublic" : "../web_ui/build",
    
            "dbName" : "test",
            "dbHost" : "127.0.0.1" ,
            "dbtype" : "mongodb" ,

            "jwtSecret" : "jwtSecret69",
            "cookieSecret" : "iamacookiesecret4321",
            "cookieExpires" : 315360000000
        }

        let settingsPath="../data/settings.json"
        let tempsettings=false
        progargs.params(function (val, index, array) {     
            if (val==="--settings" || val==="-settings" || val==="--settingspath" || val==="-settingspath"){
                settingsPath=array[index + 1 ] 
                tempsettings=true
            }        
        });
        

        let setFileExists=false
        if (existsSync(settingsPath)){
            setFileExists=true
        }else{
            if (tempsettings===false){
                cl( "settings file doesnt exist 'in data' path, please edit template that has just been created...")

                if ( settingsPath==="../data/settings.json"){
                    if (!existsSync("../data")){
                        fs.mkdirSync("../data")
                    }
                }

                fs.writeFileSync( settingsPath ,JSON.stringify(dataOdef, null, 2) )

                //throw new Error('settings file error, newly created')
            }else{
                cl( "temp settings file doesnt exist , " , settingsPath )
                //throw new Error('settings file error')
            }
            process.exit()
        }        
    
        try {
            let filedt=fs.readFileSync(settingsPath,'utf8')
            dataO_tmp=JSON.parse(filedt)    
        } catch (error) {
            console.log("settings loading error ")
            console.log(`
            please check that you have settings file created in ...mainfolder.../data/settings.json
            with similar settings to these defaults
                ${dataOdef}
            `)
        }
    
        
    
        dataO={...dataOdef , ...dataO_tmp}
        this.settings=dataO
        let settings=this.settings
        
        progargs.params(function (val, index, array) {     
            if (val==="--host" || val==="-host" || val==="--ip" || val==="-ip" || val==="--hostip"){
                settings.host=array[index + 1 ] 
            }

            if (val==="--port" || val==="-port" ){
                settings.port=array[index + 1 ] 
            }

            if (val==="--name" || val==="-name" ){
                settings.name=array[index + 1 ] 
            }

            if (val==="--desc" || val==="-desc" ){
                settings.desc=array[index + 1 ] 
            }

            if (val==="--pathFrontEndPublic" || val==="-pathFrontEndPublic" || val==="--pfpub" || val==="-pfpub"  ){
                settings.pathFrontEndPublic=array[index + 1 ] 
            } 
            
            if (val==="--dip" || val==="-dip" || val==="--defip" || val==="-defip"){
                settings.host=$cnn.os().ip
            }
        
        });
        
        return settings;    
    }

    settings={}

    name="settingsMod"

}

let settingsInst=new settingsMod()
//let settingsFile=settingsInst.settingsFileFN();


module.exports.settingsMod=settingsMod;
module.exports.settings=settingsInst.settings;