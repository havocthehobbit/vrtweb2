let path = require("path");
let fs = require("fs");
let express=require("express")
let http=require("http")
let settings=require("./settings").settings
let cookieParser=require("cookie-parser")
let cors=require("cors")
let jwt=require("jsonwebtoken")
let multer=require("multer")
let socketio=require("socket.io")



let ApiInst={
    init : (params, cbp)=>{
        let tt=ApiInst
        let cb=()=>{}
        if (typeof(cbp)==="function"){cb=cbp}

        let app = express();
        protocolH="http"
        httpServ=http.Server(app);
    
        ApiInst.app=app
        ApiInst.http=httpServ
        
        let cookieSecret=settings.cookieSecret
        let cookieExpires = settings.cookieExpires //10 * 365 * 24 * 60 * 60 * 1000 === 315360000000, or 10 years in milliseconds
        tt.cookieExpires=cookieExpires        

        app.use(cookieParser(cookieSecret));
    
        let jwtoptions={}
        tt.jwtoptions
        app.use(express.json());		
        app.use(express.urlencoded({extended: true})); 
    
    
        var cors_param={
            origin: [
                        /http/     // regular expression to allow any source server anything cause * is not allowed
                    ]
            , credentials: true
            ,methods: ["GET", "POST"]
        }
        var cors_paramsInit=cors( cors_param ) 
        app.use( "*" , cors_paramsInit );
    
        const io = socketio(http,  { cors : cors_param } );
    
        hasPubFE=true
        var FEhtmlpubpath=__dirname + "/" + ".." + "/" + ".." + "/" +  "web_ui" + "/" + "build"
        if (settings.pathFrontEndPublic!==undefined){ 
            let pt=settings.pathFrontEndPublic
            if (pt.substr(1,2)==="./" || pt.substr(1,2)==="../" ){
                FEhtmlpubpath=__dirname + "/" + ".." + "/" + pt
            }
            
            if ( pt.substr(1,2)===".\\" || pt.substr(1,2)==="..\\" ){
                FEhtmlpubpath=__dirname + "\\" + ".." + "\\" + pt
            }
    
            if (settings.pathFrontEndPublic===""){
                hasPubFE=false
            }
        }
    
        var pub=""
        if (hasPubFE){
            pub=path.resolve( FEhtmlpubpath );
            app.use(  express.static(pub ) );
        }
        
    
        app.use(express.static('public'));
       
    
        var server = httpServ.listen( settings.port , settings.host  , function () {     
            var host = server.address().address ;
            var port = server.address().port ;
        
            console.log("\n\nserver is listening at " + protocolH + "://%s:%s", host, port)
            console.log(FEhtmlpubpath , "  ..." ,new Date())
            //console.log( `if react dev mode start with (my-app/startdev.sh): export REACT_APP_DEV_NODE_PORT=${port} ; npm start `)        
            console.log("\n")
    
            cb()
        
        })
    
    
        app.get("/*" ,function(req , res){ // defualt 404 route
            //res.sendFile(path.join(__dirname, pub ), function(err) {
            res.sendFile( pub + "/" + "index.html" , function(err) {
                //if (err) {
                //  res.status(500).send(err)
                //}
            })
        })
    
        tt.app=app
        return 
    },
    app : {},
    io : {},
    cookieExpires : 0,
    jwt : jwt,
    jwtoptions : undefined,
    multer : multer,

}







module.exports.ApiInst=ApiInst