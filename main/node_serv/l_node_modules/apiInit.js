let path = require("path");
let fs = require("fs");
let express=require("express")
let http=require("http")
let settings=require("./settings").settings
let cookieParser=require("cookie-parser")
let cors=require("cors")
let jwt=require("jsonwebtoken")
let multer=require("multer")
let socketio=require("socket.io")

let $cn=require("./libNative.js").$cn
let cl=$cn.l
let tof=$cn.tof
let feach=$cn.each
let isOb=$cn.isOb
let isUn=$cn.isUn

let ApiInst={
    init : (params, cbp)=>{
        let tt=ApiInst
        let cb=()=>{}
        if (typeof(cbp)==="function"){cb=cbp}

        let mds={} ;        
        params.mds=mds
        
        let tmpMdsRet;
        
        if (typeof(params.mdsInit)!=="undefined"){
            if (param.mdsInit===false){                
            }else{
                tmpMdsRet=tt.mdsInit(params , cb)
                mds=tmpMdsRet.mds
            }
        }else{
            tmpMdsRet=tt.mdsInit(params , cb)
            mds=tmpMdsRet.mds
        }        

        tt.mds=mds

        if (typeof(params.mds)!=="undefined"){
            feach(params.mds, function(r , p){    
                mds[p]=r
            })
        }
        
        let app = express();
        protocolH="http"
        httpServ=http.Server(app);
    
        ApiInst.app=app
        ApiInst.http=httpServ
        
        let cookieSecret=settings.cookieSecret
        let cookieExpires = settings.cookieExpires //10 * 365 * 24 * 60 * 60 * 1000 === 315360000000, or 10 years in milliseconds
        tt.cookieExpires=cookieExpires        

        app.use(cookieParser(cookieSecret));
    
        let jwtoptions={}
        tt.jwtoptions
        app.use(express.json());		
        app.use(express.urlencoded({extended: true})); 
    
    
        var cors_param={
            origin: [
                        /http/     // regular expression to allow any source server anything cause * is not allowed
                    ]
            , credentials: true
            ,methods: ["GET", "POST"]
        }
        var cors_paramsInit=cors( cors_param ) 
        app.use( "*" , cors_paramsInit );
    
        const io = socketio(http,  { cors : cors_param } );
        mds.vrtw.io=io
    
        hasPubFE=true
        var FEhtmlpubpath=__dirname + "/" + ".." + "/" + ".." + "/" +  "web_ui" + "/" + "build"
        if (settings.pathFrontEndPublic!==undefined){ 
            let pt=settings.pathFrontEndPublic
            if (pt.substr(1,2)==="./" || pt.substr(1,2)==="../" ){
                FEhtmlpubpath=__dirname + "/" + ".." + "/" + pt
            }
            
            if ( pt.substr(1,2)===".\\" || pt.substr(1,2)==="..\\" ){
                FEhtmlpubpath=__dirname + "\\" + ".." + "\\" + pt
            }
    
            if (settings.pathFrontEndPublic===""){
                hasPubFE=false
            }
        }
    
        var pub=""
        if (hasPubFE){
            pub=path.resolve( FEhtmlpubpath );
            app.use(  express.static(pub ) );
        }
        
    
        app.use(express.static('public'));       
    
        var server = httpServ.listen( settings.port , settings.host  , function () {     
            var host = server.address().address ;
            var port = server.address().port ;
        
            console.log("\n\nserver is listening at " + protocolH + "://%s:%s", host, port)
            console.log(FEhtmlpubpath , "  ..." ,new Date())
            //console.log( `if react dev mode start with (my-app/startdev.sh): export REACT_APP_DEV_NODE_PORT=${port} ; npm start `)        
            console.log("\n") 
    
            cb()
        
        })
    
        


        // dynamic module routes 

        //console.log ( "dynamic module : ",mds.kcs_mod.app )
        var gl_bundle={ app : app,express : express,mds :mds , 
            vserv : { settings }, params : params, pub : pub  ,http : http , io : io, server : server}
        var dyn_routes={}
        var dyn_routes_names={}
         //   console.log("gl_bundle app", app)
        feach(mds, function(r1 , l_modulename){    
            if ( !isUn(r1["__app"] ) ){
                feach(r1["__app"], function(r , prop){
                    var mapp=r
                    var lapp={ name : "" , route : "" , type : "" , cb : function(){} }
                                
                    if (!isUn( mapp.route) ){
                        lapp.route= mapp.route;
                    }
                    if (!isUn( mapp.name) ){
                        lapp.name= mapp.name;
                        if (lapp.route===""){
                            lapp.route="/" + lapp.name;
                        }
                    }
                    if ( lapp.route==="" || lapp.route==="/"  ){
                        lapp.route="/prop"                    
                    }
                    if ( lapp.name===""){
                        lapp.name=l_modulename
                    }

                    if ( !isUn( mapp.type) ){
                        if ( mapp.type==="get" || mapp.type==="GET"){                  
                            lapp.type="get";
                        }
                        if ( mapp.type==="post" || mapp.type==="POST"){
                            lapp.type="post";
                        }
                        
                    }else{
                        lapp.type="get"
                    }
                    if (!isUn( mapp.cb) ){
                        lapp.cb= mapp.cb;
                    }
                    if (!isUn( mapp.fn) ){
                        lapp.cb= mapp.fn;
                    }
                    if (!isUn( mapp.callback) ){
                        lapp.cb= mapp.callback;
                    }

                    dyn_routes_names[lapp.name]={}
                    dyn_routes[lapp.name]={}

                    app[lapp.type]( lapp.route ,function(req, res , next) { 
                        var other = gl_bundle;
                        other.next=next
                        lapp.cb(req, res ,  other ) 
                    })

                })
            
            }
            
            if ( !isUn(r1["run_after_init"] ) ){
                r1["run_after_init"](gl_bundle)
            }
            if ( !isUn(r1["uploads"] ) ){
                if ( !isUn(r1["uploads"]["types"] ) ){
                    feach(r1["uploads"]["types"], function(r , prop){
                    
                        var mapp=r;
                        var lapp={}

                        if (!isUn( mapp.name) ){
                            lapp.name= mapp.name;
                        }else{
                            console.log("name is not included in one of the update types of custom plugins")
                        }

                        if (!isUn( mapp.cb) ){
                            lapp.cb= mapp.cb;
                        }
                        if (!isUn( mapp.fn) ){
                            lapp.cb= mapp.fn;
                        }
                        if (!isUn( mapp.callback) ){
                            lapp.cb= mapp.callback;
                        }

                        
                        feach(r1["uploads"]["types"], function(r , prop){
                                uploadsApps.types[r.name]=lapp   
                            
                        })
                    
                    })
                }
            }
        })
        

        ///////////////

        // defualt frontend - this needs to be after 
        app.get("/*" ,function(req , res){ // defualt 404 route
            //res.sendFile(path.join(__dirname, pub ), function(err) {
            res.sendFile( pub + "/" + "index.html" , function(err) {
                //if (err) {
                //  res.status(500).send(err)
                //}
            })
        })

        ///////////////
    
        tt.app=app
        return  
    },
    mdsInit : (params, cbp)=>{
        let tt=ApiInst
        let cb=()=>{}
        if (typeof(cbp)==="function"){cb=cbp}
        let mds={}
        //params.mds={} ;        
        let auto_mod_folders=[]        
        let filespath=path.join(__dirname, "../modules");
        //cl("filespath",filespath)
        var files=fs.readdirSync(filespath);

        feach( files  , function(f,i){                    
            var stat=fs.lstatSync(filespath + "/" + f) 
            if (stat.isDirectory()) {
                if (f.startsWith("custom_") ){
                    auto_mod_folders.push(f)          
                }
            }
        })

        // runs js code in custom_ and run initial main.auto_run if it exists
        feach(auto_mod_folders , function(file,i){ // if starts with  l_node_modules_auto_ then auto load file in 
            var temp_DIR = path.join(filespath, file);

            let mdsTmp=ApiInst.autoLoadModules(temp_DIR,{ 
                vserv :  settings, 
                mds : {
                    vrtw : { 
                            db : params.db,
                            dbA : params.dbA,
                             gdb : params.gdb,
                            lgs : params.lgs,
                            "$cn" : $cn,
                            "$cnn" : params.$cnn,
                            progargs : params.progargs,                            
                    },
                    nodejs : {
                        path : path,
                        fs : fs,        
                        jwt : jwt,
                        multer : multer,
                        
                    }
                }  
            });
        
            for ( let modname in mdsTmp){
                mds[modname]=mdsTmp[modname]
            }

        })

        mds.vrtw={}
        mds.vrtw.db=params.db
        mds.vrtw.dbA=params.dbA
        mds.vrtw.gdb=params.gdb
        mds.vrtw.lgs=params.lgs
        mds.vrtw["$cn"]=$cn
        mds.vrtw["$cnn"]=params.$cnn
        mds.vrtw.progargs=params.progargs

        mds.vrtw.login={}
        mds.vrtw.login.verifyLoginAPI=ApiInst.verifyLoginAPI
        mds.vrtw.login.verifyJWTroute=ApiInst.verifyJWTroute
        mds.vrtw.login.verifyJWT=ApiInst.verifyJWT
        mds.vrtw.io={}

        mds.nodejs={}
        mds.nodejs.path=path
        mds.nodejs.fs=fs        
        mds.nodejs.jwt=jwt
        mds.nodejs.multer=multer      
        
        if (typeof(params.mds)!=="undefined"){
            feach(params.mds, function(r , p){    
                mds[p]=r
            })
        }

        return { mds : mds}
    },
    app : {},
    mds : {},
    io : {},
    cookieExpires : 0,
    jwt : jwt,
    jwtoptions : undefined,
    multer : multer,

    autoLoadModules: function (fpath) {    
        var mds={};
        var skip_exp_name=false;
        var params={}
        if ( !isUn(arguments[1]) ){
            if (isOb(arguments[1])){
                params=arguments[1]
            }else{
                skip_exp_name=arguments[1]
            }
            
        }

        if ( !isUn(arguments[2]) ){
            if (isOb(arguments[2])){
                params=arguments[2]
            }
            
        }
    
        var stat=fs.lstatSync(fpath);
        if (stat.isDirectory()) {
            // we have a directory: do a tree walk
            var files=fs.readdirSync(fpath);
            var f, l = files.length;
            for (var i = 0; i < l; i++) {
                f = path.join(fpath, files[i]);
                if (f.endsWith(".js")){ 
                    //console.log("require( " , f , " )")
                    var temp=require(f)
                    //mds[f.replace("\.js", "")]=
                    if (skip_exp_name ){ // dont use export name , just use export library values id object has been exported 
                        if ( isOb(temp)){
                            feach(temp, function(val,prop){                
                                feach(val, function(val2,prop2){
                                    mds[prop2]=val2
                                })
                            })
                            
                        }else{
                            feach(temp, function(val,prop){                
                                mds[prop]=val                    
                            })
                        }
                        
                    }else{
                        feach(temp, function(val,prop){                
                            mds[prop]=val
                            //console.log(prop)
                            if (!isUn(mds[prop]["auto_run"] )){
                                mds[prop]["auto_run"](params)
                            };
                        })
                    }
                
                
        
                }
            }
        }
        return mds;
    },

    verifyLoginAPI : function(){ // either ({req : req},cb) or  ({token : token },cb)   // return { allowed : bool ... details : {user , groups , roles , programs }  }
        var tt=this
        var allowed=false
        var status="failed"
        var details={}
        var cb=function(){} 
        
        var vars={
            cb : cb,
            req : undefined,
            token : undefined,
            userAuthCust : (rr,cbr)=>{cbr({}) }
        }
        
        var args=arguments;
        var temp=""
        if ( args.length > 0){
            if (isOb(args[0])){

                temp="cb"
                if (!isOb(args[0][temp])){
                    vars.cb=args[0][temp]
                }

                temp="userAuthCust"
                if (!isUn(args[0][temp])){
                    vars[temp]=args[0][temp]
                } 

                temp="req"
                if (!isUn(args[0][temp])){
                    vars[temp]=args[0][temp]
                }

                temp="token"
                if (!isUn(args[0][temp])){
                    vars[temp]=args[0][temp]
                }

                temp="x-auth-token"
                if (!isUn(args[0][temp])){
                    vars["token"]=args[0][temp]
                }
                
            }else{
                
                    vars["token"]=args[0]
                
            }
    
            if (args.length > 1){
                vars.cb=args[args.length-1];
            }
        }

        //if (!_.isFunction(vars.cb)){
        if (!(typeof(vars.cb)==="function")){
            vars.cb=function(){} 

            status="failed";
            allowed=false;
            vars.cb({ allowed : allowed , status : status  })
            return
        }

        
        if (isUn(vars.token)){
            vars.token=vars.req.headers["x-auth-token"];
            if (!vars.token || isUn(vars.token)){
                if (!isUn(vars.req)){ 
                    vars.token=vars.req.cookies.token;
                }
            }
        }

        this.verifyJWT(vars.token,function(tkdata){   
            if (tkdata.status==="success"){
                var userid=tkdata.data.userid ;
                status="success";
                allowed=true;

                details=tkdata.data

                if ( tkdata.data.rt_jwt_isAuth ){

                    vars.userAuthCust({ allowed, status ,userid,details},(retAuth)=>{                        
                        let other={}
                        if (retAuth.allowed!==undefined){
                            allowed=retAuth.allowed
                        }
                        if (retAuth.status!==undefined){
                            status=retAuth.status                                
                        }   
                        if (retAuth.details!==undefined){
                            details=retAuth.details
                        }
                        if (retAuth.other!==undefined){
                            other=retAuth.other
                        }                            
                        vars.cb({ allowed : allowed , status : status , userid : userid , details : details, other : other })
                    })
                   
                    //vars.cb({ allowed : allowed , status : status , userid : userid  })
                   
                           
                }else{
                    status="failed";
                    allowed=false;
                    vars.cb({ allowed : allowed , status : status , details : tkdata  })
                }
            }else{
                status="failed";
                allowed=false;
                vars.cb({ allowed : allowed , status : status , details : tkdata  })
            }
        })
    },
    verifyJWTroute : function(req,res,next ){
        let token = req.headers["x-auth-token"] // no longer using x-auth-token so this can be ignored, its just "token" now , set by res.cookie('token' ...
        
        let envMainJwtTokenKey=settings.jwtSecret
    
        res.locals.rt_jwt_isAuth=false;
        
        if (!token || $cn.isUndefined(token)){
            token=req.cookies.token
        }
        if (!token || $cn.isUndefined(token)){        
            res.locals.decodedID= ""
            res.locals.rt_jwt_isAuth=false;
            res.locals.token=token
            next()
        }else{
            jwt.verify(token , envMainJwtTokenKey , function(err , decoded){
                if ( err){
                    next()
                }else{
                    res.locals.decodedID= decoded.id
                    res.locals.decoded= decoded
                    res.locals.rt_jwt_isAuth=true;
                    res.locals.token=token                
                    next()
                }
            })
        }
    },
    verifyJWT : function(){ // args token cb
        var ret={ status : "fail" , error : "" , data : {}}
        var locals={};
        var args=arguments;
    
        var token=args[0];
    
        var cb=function(){}        
        
        if ( args.length > 0){
            if (isOb(args[0])){
                if (!isUn(args[0].cb)){
                    cb=args[0].cb
                }
                
            }else{
    
            }
    
            if (args.length > 1){
                cb=args[1];
            }
        }
        
        var envMainJwtTokenKey=settings.jwtSecret
        
        jwt.verify(token , envMainJwtTokenKey , function(err , decoded){                
            if ( err){                    
                ret.err=err;                        
            }else{
                locals.decodedID= decoded.id
                locals.decoded=decoded
                locals.userid=decoded.userid
    
                locals.rt_jwt_isAuth=true;
                locals.token=token
                
                ret.status = "success"
                ret.data=locals;
            }
    
            cb(ret);    
        })
    }

}








module.exports.ApiInst=ApiInst