var child_process=require('child_process')
var fs=require('fs');
var path=require('path');
let execSync=child_process.execSync; // synchronouse shell run : var result=execSync(cmdStr)
let existsSync=fs.existsSync;
let lstatSync=fs.lstatSync;
let readdirSync=fs.readdirSync;

$cn=require("./libNative").libNative

// #todo, need to make these functions cross platform

let main={
    params : function(cb){
        process.argv.forEach(function (val, index, array) {
            cb(val, index, array)
        })
    },
    shell : function(){
        // commnand ,  callback function
        var l_val="";            
        var l_args=arguments;
        var l_args_len=l_args.length;
        var l_callback=function(){} ;
        var l_command = "" ;
        var param_array = [] ;

        if ( l_args_len > 0 ){
            var l_i=0;
            switch( typeof l_args[l_i] ){
                    case "object" :
                        if (l_args[l_i] instanceof Array ){
                            //param_array=l_args[l_i];
                        }else{
                            // is object

                        }

                        break;
                    case "function" :
                        l_callback=l_args[l_i];
                        break;
                    default :
                        l_command=l_args[l_i] ;
                        break;
            }

            var l_i=1;
            if ( l_args_len > l_i ){
                switch( typeof l_args[l_i] ){
                    case "object" :
                        if (l_args[l_i] instanceof Array ){
                            param_array=l_args[l_i];
                        }else{
                            // is object

                        }
                        break;
                    case "function" :
                        l_callback=l_args[l_i];
                        break;
                    default :
                        break;
                }
            }

            var l_i=2;
            if ( l_args_len > l_i ){
                switch( typeof l_args[l_i] ){
                    case "object" :
                        if (l_args[l_i] instanceof Array ){

                        }else{
                            // is object

                        }
                        break;
                    case "function" :
                        l_callback=l_args[l_i];
                        break;
                    default :
                        break ;
                }
            }


        }else{
            return ;
        }

        //console.log( "....",param_array);

        var l_exec=child_process.exec;
        l_exec( l_command ,{maxBuffer: 1024 * 40000}, function(error, stdout, stderr){
            if ( !(stdout==="" && error==="Error: Command failed") ){
                if (error) {
                console.error(`exec error...:${error}` , '~~~' );
                l_callback( `exec error...:${error}` );
                return;
                }
            }

            l_callback( stdout );
        });

        return 
    },
    shellsync : execSync ,
    readdir : function(files_path, cb ,cbfinal){
        
        var files=readdirSync(files_path);
        
        var recs={ tc :0 , fc : 0 ,  dc : 0 , files : files}
        $cn.each( files  , function(f,i){
            //console.log( "fa " , f )
            recs.tc++
            var fp=files_path + "/" + f
            var stat=lstatSync(  fp) 
            if (stat.isDirectory()) {
                recs.dc++
                cb( { name : f, f : f , fp : fp ,path :fp, isDir : true , stat : stat})
                                
            }else{
                recs.fc++
                cb( { name : f, f : f , fp : fp ,path :fp  , isDir : false , stat : stat })
            }
        })
        if (cbfinal){
            cbfinal(recs)
        }
        
    },
    depcy : function(){      
        //var l_this=this  
        var l_obj={
                l_this : main,
                recs : [],
                check : function(){
                    var l_this=this.l_this
                    this.recs.forEach(function(r,i){
                        var status=true
                        var type="f"
                        if (r.type==="mkdir" || r.type==="md"){
                            if (existsSync(r.dir)) {
                                status=true 
                                type="md"                  
                            }else{
                                status=false
                                type="md"   
                                console.log(`\n\n\nerror : ${r.dir} doenst exists\n\n\n`)
                            }
                        }
                        if (r.type==="dir" || r.type==="d"){
                            if (existsSync(r.dir)) {
                                status=true 
                                type="d"                  
                            }else{
                                status=false
                                type="d"   
                                console.log(`\n\n\nerror : ${r.dir} doenst exists\n\n\n`)
                            }
                        }
                        if (r.type==="file" || r.type==="f"){
                            if (existsSync(r.file)) {
                                status=true 
                                type="f"                  
                            }else{
                                status=false
                                type="f"
                                console.log(`\n\n\nerror : ${r.file} doenst exists\n\n\n`)
                            }
                        }
            
                        if (!status){
                            if (type==="md"){
                                console.log(`updating from template directory : ${r.dir}` )
                                if (r.res.action==="makedir"){
            
                                    if (typeof  r.test!== "undefined"){
                                        if (r.test){
                                            return;
                                        }
                                    }
            
                                    var cmdinit=`mkdir -p ${r.dir}`
                                    console.log(cmdinit)
                                    l_this.shell(cmdinit , function(result){ console.log("shell result : " ,result)})
                                    
                                }
                            }
            
                            if (type==="d"){
                                console.log(`updating from template directory : ${r.dir}` )
                                if (r.res.action==="copydir"){
            
                                    if (typeof  r.test!== "undefined"){
                                        if (r.test){
                                            return;
                                        }
                                    }
            
                                    var cmdinit=`mkdir -p ${r.dir} ;cp -Rp ${r.res.src } ${r.dir}/../`
                                    console.log(cmdinit)
                                    l_this.shell(cmdinit , function(result){ console.log("shell result : " ,result)})
                                    
                                }
                            }
            
                            if (type==="f"){
                                console.log(`updating from template file : ${r.file}` )
                                if (r.res.action==="fetchtemplate"){
            
                                    if (typeof  r.test!== "undefined"){
                                        if (r.test){
                                            return;
                                        }
                                    }
            
                                    var cmdinit=`cp -p ${r.res.src } ${r.file}`
                                    console.log(cmdinit)
                                    l_this.shell(cmdinit , function(result){ console.log("shell result : " ,result)})
                                    
                                }
                            }
            
                        }
                        
            
                    })
                    
                },
                add : function(rec){
                    var l_this=this.l_this
                    this.recs.push(rec)
                },
                init : function(){
                    //var l_this=this.l_this
                    //this.check()
                }
            
            
            }
            
        l_obj.init.apply( this , arguments)
        return l_obj
    },
    "$cn" : $cn ,
    
    init_depcy : function(){ // init dependancies

        //////// init dependancies ////


    },

    init_addon : function(){

    },

    proc_params_init : function(){
        let p={}
        p.new_help=""

        if (typeof(arguments[0])==="object"){
            let a0=arguments[0]
            let atmp
            
            atmp="new_help"
            if (a0[atmp]){
                p[atmp]=a0[atmp]
            }

        }

        process.argv.forEach(function (val, index, array) {
            if (index > 1){
                //console.log("prompt : ", index + ': ' + val);
            }
            var has_next_param=false
            var next_param_isAttr=false
            var next_val=undefined
            if (!$cn.isUndefined( array[index +1 ] )  ){
                next_val=array[index +1 ]
                has_next_param=true

                if (next_val.startsWith("-") ){
                    next_param_isAttr=true
                }
            }
            
            
            if (val==="-h" || val==="--h" || val==="-help" || val==="--help"){
                var help= `--------HELP------\n` 
                    help+=`====================\n` 
                         
                    help+=`\n\n` 
                    //help+=`-setup : ...\n` // #todo     
                    //help+=`\n`
                    help+=`-dip : overide data/settings with default IP address\n` 
                    help+=`-host/hostIP : overide data/settings for host or IP address\n` 
                    help+=`-port : overide data/settings for port\n` 
                    help+=`-host/hostIP : overide db/settings for db host or db IP address\n` 
                    help+=`-dbname : overide db/settings  for db name\n` 
                    help+=`-dbport : overide db/settings  for db port\n` 
                    help+=`-pfpub : overide settings for pathFrontEndPublic\n` 
                    help+=`-name : overide settings for program name\n` 
                    help+=`-adminpass/resetadmin : reset admin password\n` 
                    
                    help+=`\n\n`        
                    
                    if (p.new_help===""){
                        console.log( help )
                    }else{
                        console.log( new_help )
                    }
                    
                    
                process.exit()
            }                 

        });
        
    },

    init : function(){
        var args=arguments;
        var args_l=args.length;
        var param={ name : "" }

        this.l_this=this ;

        
      
    }
}
main.init()



module.exports.params=main;
module.exports.args=main;